{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/ai-instance.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  promptDir: './prompts',\n  plugins: [\n    googleAI({\n      apiKey: process.env.GOOGLE_GENAI_API_KEY,\n    }),\n  ],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,WAAW;IACX,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,oBAAoB;QAC1C;KACD;IACD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/luaobfuscator.ts"],"sourcesContent":["/**\n * Represents the result of a Lua script obfuscation.\n */\nexport interface ObfuscationResult {\n  /**\n   * The obfuscated Lua script.\n   */\n  obfuscatedScript: string;\n}\n\n/**\n * Asynchronously obfuscates a Lua script using the luaobfuscator.com API.\n *\n * @param script The Lua script to obfuscate.\n * @param apiKey The API key for luaobfuscator.com.\n * @returns A promise that resolves to an ObfuscationResult containing the obfuscated script.\n */\nexport async function obfuscateLuaScript(script: string, apiKey: string): Promise<ObfuscationResult> {\n  const baseUrl = 'https://api.luaobfuscator.com/v1/obfuscator';\n\n  try {\n    // Step 1: Create a new script session\n    const newScriptResponse = await fetch(`${baseUrl}/newscript`, {\n      method: 'POST',\n      headers: {\n        'apikey': apiKey,\n        'Content-Type': 'text/plain',\n      },\n      body: script,\n    });\n\n    if (!newScriptResponse.ok) {\n      const errorData = await newScriptResponse.text();\n      throw new Error(`HTTP error creating session! status: ${newScriptResponse.status}, body: ${errorData}`);\n    }\n\n    const newScriptData = await newScriptResponse.json();\n\n    if (!newScriptData.sessionId) {\n      throw new Error(`Failed to create session: ${newScriptData.message || 'Unknown error'}`);\n    }\n\n    const sessionId = newScriptData.sessionId;\n\n    // Step 2: Obfuscate the script using the session ID\n    const obfuscateResponse = await fetch(`${baseUrl}/obfuscate`, {\n      method: 'POST',\n      headers: {\n        'apikey': apiKey,\n        'sessionId': sessionId,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        MinifiyAll: true,\n        Virtualize: true, // Enable virtualization\n      }),\n    });\n\n     if (!obfuscateResponse.ok) {\n      const errorData = await obfuscateResponse.text();\n      throw new Error(`HTTP error obfuscating script! status: ${obfuscateResponse.status}, body: ${errorData}`);\n    }\n    \n    const contentType = obfuscateResponse.headers.get(\"content-type\");\n        if (!contentType || !contentType.includes(\"application/json\")) {\n          const errorData = await obfuscateResponse.text();\n          throw new Error(`Non-JSON response received: ${errorData}`);\n        }\n\n    const obfuscateData = await obfuscateResponse.json();\n\n    if (obfuscateData.code === null) {\n        throw new Error(`Obfuscation failed: ${obfuscateData.message || 'Unknown error'}`);\n    }\n\n\n    return {\n      obfuscatedScript: obfuscateData.code,\n    };\n  } catch (error: any) {\n    console.error('Error calling luaobfuscator.com API:', error);\n    throw new Error(`Failed to obfuscate script: ${error.message}`);\n  }\n}\n\n"],"names":[],"mappings":"AAAA;;CAEC;;;AAeM,eAAe,mBAAmB,MAAc,EAAE,MAAc;IACrE,MAAM,UAAU;IAEhB,IAAI;QACF,sCAAsC;QACtC,MAAM,oBAAoB,MAAM,MAAM,GAAG,QAAQ,UAAU,CAAC,EAAE;YAC5D,QAAQ;YACR,SAAS;gBACP,UAAU;gBACV,gBAAgB;YAClB;YACA,MAAM;QACR;QAEA,IAAI,CAAC,kBAAkB,EAAE,EAAE;YACzB,MAAM,YAAY,MAAM,kBAAkB,IAAI;YAC9C,MAAM,IAAI,MAAM,CAAC,qCAAqC,EAAE,kBAAkB,MAAM,CAAC,QAAQ,EAAE,WAAW;QACxG;QAEA,MAAM,gBAAgB,MAAM,kBAAkB,IAAI;QAElD,IAAI,CAAC,cAAc,SAAS,EAAE;YAC5B,MAAM,IAAI,MAAM,CAAC,0BAA0B,EAAE,cAAc,OAAO,IAAI,iBAAiB;QACzF;QAEA,MAAM,YAAY,cAAc,SAAS;QAEzC,oDAAoD;QACpD,MAAM,oBAAoB,MAAM,MAAM,GAAG,QAAQ,UAAU,CAAC,EAAE;YAC5D,QAAQ;YACR,SAAS;gBACP,UAAU;gBACV,aAAa;gBACb,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,YAAY;gBACZ,YAAY;YACd;QACF;QAEC,IAAI,CAAC,kBAAkB,EAAE,EAAE;YAC1B,MAAM,YAAY,MAAM,kBAAkB,IAAI;YAC9C,MAAM,IAAI,MAAM,CAAC,uCAAuC,EAAE,kBAAkB,MAAM,CAAC,QAAQ,EAAE,WAAW;QAC1G;QAEA,MAAM,cAAc,kBAAkB,OAAO,CAAC,GAAG,CAAC;QAC9C,IAAI,CAAC,eAAe,CAAC,YAAY,QAAQ,CAAC,qBAAqB;YAC7D,MAAM,YAAY,MAAM,kBAAkB,IAAI;YAC9C,MAAM,IAAI,MAAM,CAAC,4BAA4B,EAAE,WAAW;QAC5D;QAEJ,MAAM,gBAAgB,MAAM,kBAAkB,IAAI;QAElD,IAAI,cAAc,IAAI,KAAK,MAAM;YAC7B,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,cAAc,OAAO,IAAI,iBAAiB;QACrF;QAGA,OAAO;YACL,kBAAkB,cAAc,IAAI;QACtC;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,wCAAwC;QACtD,MAAM,IAAI,MAAM,CAAC,4BAA4B,EAAE,MAAM,OAAO,EAAE;IAChE;AACF","debugId":null}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/obfuscate-script.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A flow to obfuscate a generated Roblox script using the luaobfuscator.com API.\n *\n * - obfuscateScript - A function that handles the script obfuscation process.\n * - ObfuscateScriptInput - The input type for the obfuscateScript function.\n * - ObfuscateScriptOutput - The return type for the obfuscateScript function.\n */\n\nimport { ai } from '@/ai/ai-instance';\nimport { z } from 'genkit';\nimport { obfuscateLuaScript } from '@/services/luaobfuscator';\n\nconst ObfuscateScriptInputSchema = z.object({\n  script: z.string().describe('The Roblox script to obfuscate.'),\n});\nexport type ObfuscateScriptInput = z.infer<typeof ObfuscateScriptInputSchema>;\n\nconst ObfuscateScriptOutputSchema = z.object({\n  obfuscatedScript: z.string().describe('The obfuscated Roblox script with loadstring.'),\n  pastefyLink: z.string().describe('The link to the Pastefy paste.'),\n});\nexport type ObfuscateScriptOutput = z.infer<typeof ObfuscateScriptOutputSchema>;\n\nexport async function obfuscateScript(input: ObfuscateScriptInput): Promise<ObfuscateScriptOutput> {\n  return obfuscateScriptFlow(input);\n}\n\nconst obfuscateScriptFlow = ai.defineFlow<\n  typeof ObfuscateScriptInputSchema,\n  typeof ObfuscateScriptOutputSchema\n>(\n  {\n    name: 'obfuscateScriptFlow',\n    inputSchema: ObfuscateScriptInputSchema,\n    outputSchema: ObfuscateScriptOutputSchema,\n  },\n  async input => {\n    const { script } = input;\n\n    try {\n      // Retrieve API key from environment variables\n      const apiKey = process.env.LUAOBFUSCATOR_API_KEY || '1179e31b-5118-5fd0-d81a-4e146600c3daab0'; // Providing a fallback value\n\n      if (!apiKey) {\n        throw new Error('LUAOBFUSCATOR_API_KEY environment variable is not set.');\n      }\n      const obfuscationResult = await obfuscateLuaScript(script, apiKey)\n\n      // Upload the obfuscated script to pastefy.app as raw text\n      const pastefyApiKey = \"evzZk5KJWEmTEjvKDoMZ2ubVw6TjXuMEgvgqYrwolifn8pXvrbZ7Grl8WAsH\"; // Provided API key\n      const uploadResponse = await fetch('https://pastefy.app/api/v2/paste', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${pastefyApiKey}`,\n        },\n        body: JSON.stringify({\n          content: obfuscationResult.obfuscatedScript,\n          title: \"Obfuscated Roblox Script\",\n          type: \"PASTE\",\n          visibility: \"UNLISTED\",\n          encrypted: false,\n        }),\n      });\n\n      if (!uploadResponse.ok) {\n        const errorText = await uploadResponse.text();\n        throw new Error(`Pastefy upload failed with status ${uploadResponse.status}: ${errorText}`);\n      }\n\n      const uploadData = await uploadResponse.json();\n\n      if (!uploadData || !uploadData.paste || !uploadData.paste.id) {\n        throw new Error('Invalid Pastefy upload response.');\n      }\n\n      // Construct the raw URL\n      const pasteId = uploadData.paste.id;\n      const pastefyLink = `https://pastefy.app/${pasteId}`;\n      const rawUrl = `https://pastefy.app/${pasteId}/raw`;\n\n\n      return {\n        obfuscatedScript: `loadstring(game:HttpGet(\"${rawUrl}\"))()`,\n        pastefyLink: pastefyLink,\n      };\n    } catch (error: any) {\n      throw error;\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;AACA;;;;;;;AAEA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAGA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACtC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,uCAAa,GAAb,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,sBAAsB,2HAAA,CAAA,KAAE,CAAC,UAAU,CAIvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAE,MAAM,EAAE,GAAG;IAEnB,IAAI;QACF,8CAA8C;QAC9C,MAAM,SAAS,QAAQ,GAAG,CAAC,qBAAqB,IAAI,2CAA2C,6BAA6B;QAE5H,uCAAa;;QAEb;QACA,MAAM,oBAAoB,MAAM,CAAA,GAAA,gIAAA,CAAA,qBAAkB,AAAD,EAAE,QAAQ;QAE3D,0DAA0D;QAC1D,MAAM,gBAAgB,gEAAgE,mBAAmB;QACzG,MAAM,iBAAiB,MAAM,MAAM,oCAAoC;YACrE,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB,CAAC,OAAO,EAAE,eAAe;YAC5C;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,SAAS,kBAAkB,gBAAgB;gBAC3C,OAAO;gBACP,MAAM;gBACN,YAAY;gBACZ,WAAW;YACb;QACF;QAEA,IAAI,CAAC,eAAe,EAAE,EAAE;YACtB,MAAM,YAAY,MAAM,eAAe,IAAI;YAC3C,MAAM,IAAI,MAAM,CAAC,kCAAkC,EAAE,eAAe,MAAM,CAAC,EAAE,EAAE,WAAW;QAC5F;QAEA,MAAM,aAAa,MAAM,eAAe,IAAI;QAE5C,IAAI,CAAC,cAAc,CAAC,WAAW,KAAK,IAAI,CAAC,WAAW,KAAK,CAAC,EAAE,EAAE;YAC5D,MAAM,IAAI,MAAM;QAClB;QAEA,wBAAwB;QACxB,MAAM,UAAU,WAAW,KAAK,CAAC,EAAE;QACnC,MAAM,cAAc,CAAC,oBAAoB,EAAE,SAAS;QACpD,MAAM,SAAS,CAAC,oBAAoB,EAAE,QAAQ,IAAI,CAAC;QAGnD,OAAO;YACL,kBAAkB,CAAC,yBAAyB,EAAE,OAAO,KAAK,CAAC;YAC3D,aAAa;QACf;IACF,EAAE,OAAO,OAAY;QACnB,MAAM;IACR;AACF;;;IAlEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 396, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 447, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 461, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 475, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}